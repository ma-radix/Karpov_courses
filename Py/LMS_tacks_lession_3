#3.1 Переменная names содержит в себе строку, где хранятся имена в формате 'Name1 Surname1, Name2 Surname2, …'.
    # Поместите в переменную names_list список со строками имён – ['Name1 Surname1', 'Name2 Surname2', …]

names_list = names.split(', ')

#3.2 Отберите из них только те, где wealth принимает значение 'medium', а возраст составляет больше 35.
Поместите результат в переменную medium_35.

medium_35 = df.query('wealth == "medium" and age > 35')

# 3.3 Воспользуйтесь методом rename и приведите таблицу к более каноничному виду, сохранив её в ту же самую переменную df.

df = df.rename(columns={'Клиент id' : 'client_id', 'Пол' : 'sex', 'Благосостояние' : 'wealth', 'Возраст' : 'age'})

# 3.4 Добавьте в исследуемый нами датафрэйм df колонку older_than_30, в которой будет информация превышает ли значение
    # переменной возраста 30 лет или нет (булево значение)

df['older_than_30'] = df.age.apply(lambda x: x > 30)

#3.5 А теперь получите серию с числом уникальных значений для каждой колонки и присвойте её переменной unique_num.

unique_num = df.nunique()

#3.6 Проведите inner join датафрейма data с df из предыдущего шага, объединив их по колонке client_id,
    # и поместите результат в переменную full_data

full_data = df.merge(data, how = 'inner', on ='client_id'

# 3.7 Теперь давайте создадим собственную функцию. Напишите функцию read_n_agg, которая:

    # 1. принимает на вход один параметр – путь к файлу
    # 2. при помощи переданного пути, считывает файл, в котором разделителем является ;
    # 3. считает средний заработок (income) по каждой компании (company), перенося колонку company в индекс (as_index=True)
    # 4. возвращает результат этих действий (агрегированный датафрэйм)

def read_n_agg(x):
    df = pd.read_csv(x, sep = ';')
    return  df \
        .groupby(['company'], as_index = True) \
        .agg({'income' : 'mean'})
                     
# 3.8 Импортируйте pandas как pd. В данном задании ссылка на датасет находится в переменной path_to_file. 
Загрузите датасет, используя ; в качестве разделителя. 

Также укажите, что столбцы start_at, end_at, arrived_at нужно прочитать как даты (параметр parse_dates).
Результат запишите в переменную taxi.

import pandas as pd
taxi = pd.read_csv(path_to_file, sep=";", parse_dates=['start_at', 'end_at', 'arrived_at'])

# Остальное в pandas_peru_taxi_lession_3.ipynb в этой же папке


                     
                     